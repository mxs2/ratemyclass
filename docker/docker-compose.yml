services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: ratemyclass-db
    environment:
      POSTGRES_DB: ratemyclass
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ratemyclass-network

  # Backend Application
  backend:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    container_name: ratemyclass-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DATABASE_URL: jdbc:postgresql://database:5432/ratemyclass
      JWT_SECRET: mySecretKey123456789012345678901234567890
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://frontend
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ratemyclass-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ..
      dockerfile: frontend/Dockerfile
    container_name: ratemyclass-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ratemyclass-network
    restart: unless-stopped

  # Redis Cache (optional, for production scaling)
  redis:
    image: redis:7-alpine
    container_name: ratemyclass-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ratemyclass-network
    restart: unless-stopped

  # Nginx Load Balancer (for production)
  nginx:
    image: nginx:alpine
    container_name: ratemyclass-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ratemyclass-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ratemyclass-network:
    driver: bridge